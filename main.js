(()=>{"use strict";class t{constructor(t,e,s,i=performance.now()){this.parentEl=e,this.id=i,this.value=s,this.widget=t,this.actualElement,this.widget.tasks[this.parentEl.classList[0]].push({[this.id]:this.value}),this.onClose=this.onClose.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}static get markup(){return'\n        <span class="cardtext"></span>\n        <span class="cardclose">&#128473;</span>\n      '}createCard(){this.card=document.createElement("div"),this.card.dataset.id=this.id,this.card.classList.add("card"),this.card.innerHTML=t.markup,this.text=this.card.querySelector(".cardtext"),this.text.textContent=this.value,this.parentEl.insertBefore(this.card,this.parentEl.firstChild.nextElementSibling),this.close=this.card.querySelector(".cardclose"),this.close.addEventListener("click",this.onClose),this.card.addEventListener("mousedown",this.onMouseDown)}onClose(t){document.querySelector("html").classList.remove("cursorgrabbing"),document.querySelectorAll(".card").forEach((t=>{t.classList.remove("cursorgrabbing")})),this.widget.deleteTask(this.parentEl,this),this.card.remove()}definePlaceCard(t,e){const s=e.querySelector(".addcard");if(null===e.querySelector(".card"))return s;{let i=document.elementFromPoint(t.clientX,t.clientY);const n=e.querySelector(".head"),a=e.querySelector(".addcardtext");if(i===s||i===a)return s;if(i===e)return i=document.elementFromPoint(t.clientX,t.clientY+15),"card"===i.classList[0]?i:s;if(i===n)return n.nextElementSibling;if("card"===i.classList[0]){const e=i.closest("div"),{top:s}=e.getBoundingClientRect();return t.pageY>window.scrollY+s+e.offsetHeight/2?e.nextElementSibling:e}return this.cloneNode}}onMouseUp(t){document.querySelector("html").classList.remove("cursorgrabbing"),document.querySelectorAll(".card").forEach((t=>{t.classList.remove("cursorgrabbing")})),this.parentEl.querySelector(".newplace")?this.parentEl.insertBefore(this.actualElement,this.newPlaceNode):this.parentEl.insertBefore(this.actualElement,this.cloneNode),this.newPlaceNode.remove(),this.cloneNode.remove(),this.actualElement.classList.remove("dragged"),this.actualElement.removeAttribute("style"),this.actualElement=void 0,this.widget.refreshTask(this.parentEl),document.documentElement.removeEventListener("mouseup",this.onMouseUp),document.documentElement.removeEventListener("mousemove",this.onMouseMove)}onMouseMove(t){this.actualElement.style.left=t.clientX-this.clickX+"px",this.actualElement.style.top=t.clientY-this.clickY+"px";let e=t.target.closest("td");this.newPlaceNode.remove(),null!==e?(this.newPlace=this.definePlaceCard(t,e),this.parentEl=this.newPlace.closest("td")):(this.newPlace=this.cloneNode,this.parentEl=this.cloneNode.closest("td")),this.newPlace!==this.cloneNode&&this.newPlace.previousElementSibling!==this.cloneNode&&this.newPlace.nextElementSibling!==this.cloneNode&&(this.parentEl=this.newPlace.closest("td"),this.parentEl.insertBefore(this.newPlaceNode,this.newPlace))}onMouseDown(t){if(document.querySelector("html").classList.add("cursorgrabbing"),document.querySelectorAll(".card").forEach((t=>{t.classList.add("cursorgrabbing")})),t.preventDefault(),t.target===this.close)return;this.actualElement=t.currentTarget,this.widget.deleteTask(this.parentEl,this),this.cloneNode=this.actualElement.cloneNode(!0),this.actualElement.style.width=this.actualElement.clientWidth+"px";const e=this.actualElement.offsetTop,s=this.actualElement.offsetLeft;this.actualElement.classList.add("dragged"),this.actualElement.style.top=e-2+"px",this.actualElement.style.left=s+"px",this.cloneNode.classList.add("opacity"),this.cloneNode.textContent="",this.newPlaceNode=this.cloneNode.cloneNode(!0),this.newPlaceNode.classList.add("newplace"),this.parentEl.insertBefore(this.cloneNode,this.actualElement.nextElementSibling),this.newPlace=this.cloneNode,this.clickX=t.clientX-this.cloneNode.offsetLeft,this.clickY=t.clientY-this.cloneNode.offsetTop,document.documentElement.addEventListener("mouseup",this.onMouseUp),document.documentElement.addEventListener("mousemove",this.onMouseMove)}}class e{constructor(t,e){this.parentEl=e,this.widget=t,this.onShowForm=this.onShowForm.bind(this),this.onFormclose=this.onFormclose.bind(this),this.onSubmit=this.onSubmit.bind(this),this.init()}init(){this.add=document.createElement("div"),this.add.classList.add("addcard"),this.parentEl.append(this.add),this.parent=this.add.closest("td"),this.showAddCard()}static get markFormUp(){return'\n          <form class="addform">\n            <textarea class="textarea" id="textarea" rows="4" cols="28" maxlength="88" placeholder="Enter a title for this card"></textarea>\n            </br><input type="submit" class="submit" value="Add Card" />\n            <span class="formclose">&#128473;</span>\n          </form>\n        '}static get markup(){return'\n          <span class="addcardtext">&#10133; Add another card</span>\n        '}showAddCard(){this.add.innerHTML=e.markup,this.addcardtext=this.add.querySelector(".addcardtext"),this.addcardtext.addEventListener("click",this.onShowForm)}onShowForm(t){this.add.innerHTML=e.markFormUp,this.formclose=this.add.querySelector(".formclose"),this.submit=this.add.querySelector(".submit"),this.formclose.addEventListener("click",this.onFormclose),this.submit.addEventListener("click",this.onSubmit)}onFormclose(t){this.showAddCard()}onSubmit(e){if(e.preventDefault(),this.textarea=this.add.querySelector(".textarea"),0!==this.textarea.value.length){new t(this.widget,this.parent,this.textarea.value.trim()).createCard(),this.showAddCard()}}}class s{constructor(t){this.parentEl=t,this.tasks={todo:[],inprogress:[],done:[]},this.onUnload=this.onUnload.bind(this)}static get markup(){return'\n      <div class="trellowidget">\n        <table class="table">\n          <tr>\n            <td class="todo"><div class="head">TODO</div></td>\n            <td class="inprogress"><div class="head">IN PROGRESS</div></td>\n            <td class="done"><div class="head">DONE</div></td>\n          </tr>\n        </table>\n      </div>\n    '}static get submitSelector(){return".btn"}static get inputSelector(){return".input"}static get selector(){return".cardsform"}static get result(){return".result"}static get card(){return".card"}static get clear(){return".clear"}bindToDOM(){this.parentEl.innerHTML=s.markup,this.element=this.parentEl.querySelector(".trellowidget"),this.tds=this.element.querySelectorAll("td"),this.tds.forEach((t=>{new e(this,t).showAddCard()})),this.restoreTasks(),window.addEventListener("unload",this.onUnload)}onUnload(t){localStorage.setItem("tasks",JSON.stringify(this.tasks))}restoreTasks(){const e=JSON.parse(localStorage.getItem("tasks"));null!==e&&Object.keys(e).forEach((s=>{const i=this.element.querySelector(`.${s}`);e[s].map((e=>{new t(this,i,Object.values(e)[0],Object.keys(e)[0]).createCard()}))}))}deleteTask(t,e){let s=this.tasks[t.classList[0]].filter((t=>String(Object.keys(t)[0])!==String(e.id)));this.tasks[t.classList[0]]=s}refreshTask(t){const e=Array.from(t.querySelectorAll(".card")).reverse(),s=[];e.map((t=>{s.push({[t.dataset.id]:t.querySelector(".cardtext").textContent})})),this.tasks[t.classList[0]]=s}}document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector(".app");new s(t).bindToDOM()}))})();